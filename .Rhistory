install.packages("semPLS")
# Import libraries
library(tidyverse)
library(semPLS)
help("ECSImobi")
# Import the data
df <- data("ECSImobi")
head(df)
df
ECSImobi
# Import libraries
library(tidyverse)
library(semPLS)
# Import European Satisfaction Index (ECSI) and
# the measurement instrument for the mobile phone industry
data("ECSImm")
View(ECSImm)
# From-to-matrix: first column contains the tail and the second row is the head
# Structural model
data("ECSIsm")
View(ECSIsm)
# Dataset of the MVs
data("mobi")
View(mobi)
# Create a plsm object
ECSI <- plsm(data = mobi, strucmod = ECSIsm, measuremod = ECSImm)
mvpairs(model = ECSI, data = mobi, LV = "Expectation")
mvplot(model = ECSI, data = mobi, LV = "Expectation")
mvpairs(model = ECSI, data = mobi, LV = "Expectation")
# sem pls
ecsi <- sempls(model = ECSI, data = mobi, wscheme = "centroid")
# Create the diagram
pathDiagram(ecsi, file = "ecsi-structure", full = FALSE, edge.labels = "both",
output.type = "graphics", digits = 2, graphics.fmt = "pdf")
install.packages("sna")
library(sna)
read.dot("ecsi-structure.dot")
install.packages("DiagrammeR")
help(data(semPLS::ECSI))
??semPLS::ECSI
library(tidyverse)
library(semPLS)
library(sna)
# From-to-matrix: first column contains the tail and the second row is the head
# Structural model
data("ECSIsm")
# Measurement model: reflectively (default)
data("ECSImm")
# Dataset of the MVs
data("mobi")
# Create a plsm object
ECSI <- plsm(data = mobi, strucmod = ECSIsm, measuremod = ECSImm)
# sem pls
ecsi <- sempls(model = ECSI, data = mobi, wscheme = "centroid")
# Create the diagram
pathDiagram(ecsi, file = "ecsi-structure", full = FALSE, edge.labels = "both",
output.type = "graphics", digits = 2, graphics.fmt = "pdf")
ecsi
names(ecsi)
ecsi$factor_scores
names(ecsi)
# Path coefficients and total effects are extracted by pathCoeff and totalEffects
pC <- pathCoeff(ecsi)
print(pC, abbreviate = T, minlength = 3)
print(pC, minlength = 3)
print(pC)
print(pC, abbreviated = T, minlength = 3)
print(pC, abbreviate = T, minlength = 3)
tE <- totalEffects(ecsi)
print(tE, abbreviate = T, minlength = 3)
plsWeights(ecsi)
plsLoadings(ecsi)
plot(ecsi)
# Kernel density estimates can provide hints on the adequacy of the model
densityplot(ecsi, use = "residuals")
# Model criteria
# rSquared(): coefficients of determination for each endogeneous LV
rSquared(ecsi)
# qSquared(): Stone-Geisser's Q2 for assessment of predictive relevance
qSquared(ecsi)
# dgrho(): Dillon-Goldstein's rho, also referred to as composite reliability
dgrho(ecsi)
# communality(): communality indices for reflectively measured LVs
communality(ecsi)
# redundancy(): redundancy indices for endogenous LVs
redundancy(ecsi)
# gof(): GoF index (geometric mean of average communality and average determination coefficient)
gof(ecsi)
ecsiBoot <- bootsempls(ecsi, nboot = 500, start = "ones", verbose = F)
ecsiBoot
ecsiBootsummary <- summary(ecsiBoot, type = "bca", level = 0.9)
ecsiBootsummary
densityplot(ecsiBoot, patern = "beta")
parallelplot(ecsiBoot, pattern = "beta", reflinesAt = c(0, 0.5),
alpha = 0.3, type = "bca", main = "Path Coefficients\nof 500 bootstrap samples")
library(tidyverse)
library(semPLS)
library(DiagrammeR)
# From-to-matrix: first column contains the tail and the second row is the head
# Structural model
data("ECSIsm")
# Measurement model: reflectively (default)
data("ECSImm")
# Dataset of the MVs
data("mobi")
# Create a plsm object
ECSI <- plsm(data = mobi, strucmod = ECSIsm, measuremod = ECSImm)
mvplot(model = ECSI, data = mobi, LV = "Expectation")
mvpairs(model = ECSI, data = mobi, LV = "Expectation")
# sem pls
ecsi <- sempls(model = ECSI, data = mobi, wscheme = "centroid")
# Create the diagram
pathDiagram(ecsi, file = "ecsi-structure", full = FALSE, edge.labels = "both",
output.type = "graphics", digits = 2, graphics.fmt = "pdf")
grViz("ecsi-structure.dot")
# Full model
pathDiagram(ecsi, file = "ecsi-structure", full = TRUE, edge.labels = "both",
output.type = "graphics", digits = 2, graphics.fmt = "pdf")
# Create the diagram
# Structural model only
pathDiagram(ecsi, file = "ecsi-structure", full = FALSE, edge.labels = "both",
output.type = "graphics", digits = 2, graphics.fmt = "pdf")
grViz("ecsi-fullstructure.dot")
# Full model
pathDiagram(ecsi, file = "ecsi-fullstructure", full = TRUE, edge.labels = "both",
output.type = "graphics", digits = 2, graphics.fmt = "pdf")
grViz("ecsi-fullstructure.dot")
# Model evaluation
# Measurement model
# 1. convergent validity
plsLoadings(ecsi)
ecsi$outer_loadings
# 2. Indicator reliability
communality(ecsi)
# 3. Composite reliability
dgrho(ecsi)
# Model evaluation
# Measurement model
# 1. convergent validity
ecsi$outer_loadings
# 4. Discriminant validity
plsLoadings(ecsi)
# B. Structural Model
# 1. Coefficient of determination
rSquared(ecsi)
# 2. Redundancy
redundancy(ecsi)
# 3. Goodness of fit
gof(ecsi)
# 4. Q2
qSquared(ecsi)
# Path coefficients and total effects are extracted by pathCoeff and totalEffects
pC <- pathCoeff(ecsi)
print(pC, abbreviate = T, minlength = 3)
tE <- totalEffects(ecsi)
print(tE, abbreviate = T, minlength = 3)
plsWeights(ecsi)
plsLoadings(ecsi) # Loadings used to check for discrimant validity
# BOOTSTRAPPED SEMPLS
set.seed(123)
ecsiBoot <- bootsempls(ecsi, nboot = 500, start = "ones", verbose = F)
ecsiBootsummary <- summary(ecsiBoot, type = "bca", level = 0.9)
ecsiBootsummary
parallelplot(ecsiBoot, pattern = "beta", reflinesAt = c(0, 0.5),
alpha = 0.3, type = "bca", main = "Path Coefficients\nof 500 bootstrap samples")
ecsi$total_effects
ecsi$iterations
ecsi$scaled
ecsi$weights_evolution
ecsi$data
ecsi$incomplete
print(pC, abbreviate = T, minlength = 3)
print(tE, abbreviate = T, minlength = 3)
te
tE
pC
pC + pC
pC %*% pc
pC %*% pC
pC %*% pC %*% pC
tE
pC + (pC %*% pC) + (pC %*% pC %*% pC)
dp <- pC
for(i in nrow(pC)){
dp <- dp + (pC %*% pC)
}
dp
dp <- pC
for(i in nrow(pC)){
dp <- dp + (dp %*% dp)
}
dp
tE
dp <- pC
for(i in 1:nrow(pC)){
dp <- dp + (dp %*% dp)
}
dp
dp <- pC
for(i in 1:nrow(pC)){
pr <- dp
for(j in 1:i){
pr <- pr %*% dp
}
dp <- dp + pr
}
dp
tE
dp <- pC
for(i in 1:nrow(pC)){
pr <- dp
for(j in 1:i){
pr <- pr %*% dp
}
dp <- dp + pr
}
dp
cor(ecsi$data, ecsi$factor_scores)
plsLoadings(ecsi)
ecsi$outer_loadings
cor(ecsi$data, ecsi$factor_scores)
ecsi$outer_loadings
# Kernel density estimates can provide hints on the adequacy of the model
densityplot(ecsi, use = "residuals")
# 3. Composite reliability
dgrho(ecsi)
# 2. Indicator reliability
communality(ecsi)
cor(ecsi$data, ecsi$factor_scores)
library(tidyverse)
library(semPLS)
library(DiagrammeR)
# From-to-matrix: first column contains the tail and the second row is the head
# Structural model
data("ECSIsm")
# Measurement model: reflective (default)
data("ECSImm")
# Dataset of the MVs
data("mobi")
grViz("ecsi-fullstructure.dot")
help("mobi")
(10 - 7) / (0.94 * sqrt(2 / 10))
(10 - 7) / (0.94 * sqrt(2 / 10)) / 2
(10 - 7) / (0.94 / sqrt(20))
(10 - 7) / (0.94 / sqrt(10))
(10 - 7) / (0.94 * sqrt(2 / 10))
(0.94 / 10) * 100
(0.94 / 3) * 100
(0.94 / 7) * 100
(10 - 7) / sqrt((2 * 0.94^2) / 10)
# Bootstrapping
library(tidyverse)
library(ISLR2)
library(boot)
# Data: the portfolio data set is simulated data for 100 pairs of return,
# generated in the fashion
data("Portfolio")
alpha_fn <- function(data, index){
X <- data$X[index]
Y <- data$Y[index]
(var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y))
}
Portfolio
alpha_fn(Portfolio, 1:100)
set.seed(7)
alpha_fn(Portfolio, sample(100, 100, replace = T))
# Bootstrapping using boot() function from boot library
boot(Portfolio, alpha_fn, R = 1000)
# Estimating the Accuracy of a Linear Regression Model
data("Auto")
Auto
# We will compare the estimates obtained using the bootstrap to those obtained
# using the formulas for SE(B0) and SE(B1)
boot_fn <- function(data, index) coef(lm(mpg ~ horsepower, data = data, subset = index))
boot_fn(Auto, 1:392)
boot_fn(Auto, sample(392, 392, replace = T))
set.seed(1)
boot_fn(Auto, sample(392, 392, replace = T))
boot(Auto, boot_fn, 1000)
summary(lm(mpg ~ horsepower, data = data, subset = index))
summary(lm(mpg ~ horsepower, data = Auto))
summary(lm(mpg ~ horsepower, data = Auto))$coef
plot(Auto$horsepower, Auto$mpg)
boot_fn <- function(data, index) coef(lm(mpg ~ horsepower + I(horsepower^2), data = data, subset = index))
set.seed(1)
boot(Auto, boot_fn, 1000)
summary(lm(mpg ~ horsepower + I(horsepower^2), data = data, subset = index))$coef
summary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef
